These notes are for creating  pll for Ice40 HX8K.

icepll is part of icestorm.

devel@mypi3-20:~/testbuilds/catzip/rtl/catzip $ icepll -i 100 -o 40 -f SB_PLL40_CORE.v -m
***********************command output*********************** 

F_PLLIN:   100.000 MHz (given)
F_PLLOUT:   40.000 MHz (requested)
F_PLLOUT:   40.000 MHz (achieved)

FEEDBACK: SIMPLE
F_PFD:   20.000 MHz
F_VCO:  640.000 MHz

DIVR:  4 (4'b0100)
DIVF: 31 (7'b0011111)
DIVQ:  4 (3'b100)

FILTER_RANGE: 2 (3'b010)

PLL configuration written to: pll.v
***********************command output***********************

***********************SB_PLL40_CORE.v***********************
/**
 * PLL configuration
 *
 * This Verilog module was generated automatically
 * using the icepll tool from the IceStorm project.
 * Use at your own risk.
 *
 * Given input frequency:       100.000 MHz
 * Requested output frequency:   40.000 MHz
 * Achieved output frequency:    40.000 MHz
 */

module pll(
	input  clock_in,
	output clock_out,
	output locked
	);

SB_PLL40_CORE #(
		.FEEDBACK_PATH("SIMPLE"),
		.DIVR(4'b0100),		// DIVR =  4
		.DIVF(7'b0011111),	// DIVF = 31
		.DIVQ(3'b100),		// DIVQ =  4
		.FILTER_RANGE(3'b010)	// FILTER_RANGE = 2
	) uut (
		.LOCK(locked),
		.RESETB(1'b1),
		.BYPASS(1'b0),
		.REFERENCECLK(clock_in),
		.PLLOUTCORE(clock_out)
		);

endmodule

***********************SB_PLL40_CORE.v***********************

***********************catzip/rtl/toplevel.v***********************
'ifdef VERILATOR
	assign s_clk = i_clk
'else

	wire	clk_40mhz, pll_locked;
	SB_PLL40_CORE #(
		.FEEDBACK_PATH("SIMPLE"),
		.DELAY_ADJUSTMENT_MODE_FEEDBACK("FIXED"),
		.DELAY_ADJUSTMENT_MODE_RELATIVE("FIXED"),
		.PLLOUT_SELECT("GENCLK"),
		.FDA_FEEDBACK(4'b1111),
		.FDA_RELATIVE(4'b1111),
		.DIVR(4'b0100),		// DIVR =  4
		.DIVQ(7'b0011111),		// DIVQ =  31
		.DIVF(3'b100),		// DIVF =  4
		.FILTER_RANGE(3'b010)	// FILTER_RANGE = 2
	) plli (
		.REFERENCECLK     (i_clk        ),
		.PLLOUTCORE     (clk_40mhz    ),
		.LOCK           (pll_locked  ),
		.BYPASS         (1'b0         ),
		.RESETB         (1'b1         )
	);
       	//SB_GB global_buffer(clk_40mhz, s_clk
       	assign	s_clk = clk_40mhz;
'endif
***********************catzip/rtl/toplevel.v***********************
This is what is generated with pll.scala & TopLevel.scala
       	
  wire       [0:0]    _zz_2;
  wire       [0:0]    _zz_3;       	
  pll uut (
    .REFERENCECLK    (CLK_100         ), //i
    .PLLOUTCORE      (uut_PLLOUTCORE  ), //o
    .locked          (uut_locked      ), //o
    .BYPASS          (_zz_2           ), //i
    .RESETB          (_zz_3           )  //i
  );
  
  assign _zz_2 = 1'b0;
  assign _zz_3 = 1'b1;
